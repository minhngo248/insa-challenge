#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('insa-challenge:server');
var http = require('http');

var player = require('../services/playerService');
var gameRoom = require('../services/gameRoomService');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

const io = require("socket.io")(httpServer, {
  cors: {
    // or with an array of origins
    origin: ["https://insa-challenge.minhnn.fr", "https://insa-challenge-ui.firebaseapp.com", "http://localhost:3000"],
    credentials: true
  }
});

io.of("/player").on("connection", (socket) => {
  socket.on("sign in", (data, callback) => {
    player.updateToOnlinePlayer(data._id);
    socket.join("client-login");  
    callback({
      status: "ok"
    });
  });

  socket.on("join", async (data, callback) => {
    socket.to("client-login").emit("update data");
    const room = await gameRoom.findGameRoomById(data.roomId);
    const sentRoom = { _id: room._id, name: room.name };
    var res = null;
    try {
      await gameRoom.addPlayerToGameRoom(data.roomId, data.player);
      await player.updateGameRoom(data.player._id, sentRoom);
      socket.join(`game-room-${room.name}`);

      // Emit will send message to the user
      // who had joined
      console.log('Player has joined the room');
      res = "No error";
      callback(res, null);
    } catch (err) {
      callback(res, err);
    }
  });

  socket.on("out room", async (data, callback) => {
    socket.to("client-login").emit("update data");
    const room = await gameRoom.findGameRoomById(data.roomId);
    await gameRoom.deletePlayerToGameRoom(data.roomId, data.player);
    await player.updateGameRoom(data.player._id, null);
    socket.leave(`game-room-${room.name}`);
    // Emit will send message to the user
    // who had left
    console.log('Player has left the room');
    callback();
  });

  socket.on("client log out", async () => {
    socket.to("client-login").emit("update data");
    socket.disconnect();
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
